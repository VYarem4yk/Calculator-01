{"version":3,"sources":["control/control.js","App.js","serviceWorker.js","index.js"],"names":["Control","props","handleButtonClick","event","state","sign","setState","number1","Number","target","value","number2","handleClickSign","Math","sqrt","toFixed","handleClearClick","handleBack","breakPoint1","String","breakPoint2","substr","length","handleDotClick","handleResultClick","this","className","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1746f6c8.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport \"./control.css\";\r\nclass Control extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      number1: \"\",\r\n      number2: \"\",\r\n      sign: null,\r\n    };\r\n  }\r\n  handleButtonClick = (event) => {\r\n    this.state.sign == null\r\n      ? this.setState({\r\n          number1: Number(`${this.state.number1}${+event.target.value}`),\r\n        })\r\n      : this.setState({\r\n          number2: Number(`${this.state.number2}${+event.target.value}`),\r\n        });\r\n  };\r\n\r\n  handleClickSign = (event) => {\r\n    if (event.target.value == \"sqrt\") {\r\n      this.setState({\r\n        number1: Math.sqrt(this.state.number1).toFixed(3),\r\n      });\r\n    }\r\n    this.setState({\r\n      number2: \"\",\r\n      sign: event.target.value,\r\n    });\r\n  };\r\n  handleClearClick = () => {\r\n    this.setState({\r\n      sign: null,\r\n      number1: \"\",\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    let breakPoint1 = String(this.state.number1);\r\n    let breakPoint2 = String(this.state.number2);\r\n    if (this.state.number2 == \"\") {\r\n      this.setState({\r\n        number1: Number(breakPoint1.substr(0, breakPoint1.length - 1)),\r\n      });\r\n    } else {\r\n      this.setState({\r\n        number2: Number(breakPoint2.substr(0, breakPoint2.length - 1)),\r\n      });\r\n    }\r\n  };\r\n\r\n  handleDotClick = () => {\r\n    let breakPoint1 = String(this.state.number1);\r\n    let breakPoint2 = String(this.state.number2);\r\n    if (this.state.number2 == \"\") {\r\n      this.setState({\r\n        number1: breakPoint1 + \".\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        number2: breakPoint2 + \".\",\r\n      });\r\n    }\r\n  };\r\n\r\n  handleResultClick = () => {\r\n    this.setState({\r\n      sign: null,\r\n    });\r\n    const { number1, number2 } = this.state;\r\n    switch (this.state.sign) {\r\n      case \"+\":\r\n        this.setState({\r\n          number1: number1 + number2,\r\n          value: [],\r\n        });\r\n        break;\r\n      case \"-\":\r\n        this.setState({\r\n          number1: number1 - number2,\r\n        });\r\n        break;\r\n      case \"x\":\r\n        this.setState({\r\n          number1: number1 * number2,\r\n        });\r\n        break;\r\n      case \"/\":\r\n        this.setState({\r\n          number1: (number1 / number2).toFixed(3),\r\n        });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <tr>\r\n          <h3>\r\n            {this.state.sign == null\r\n              ? this.state.number1 == \"\"\r\n                ? 0\r\n                : this.state.number1\r\n              : this.state.number2 == \"\"\r\n              ? this.state.number1\r\n              : this.state.number2}\r\n          </h3>\r\n        </tr>\r\n        <tr>\r\n          <tr>\r\n            <td>\r\n              <button\r\n                className=\"controlMain\"\r\n                value=\"sqrt\"\r\n                onClick={this.handleClickSign}\r\n              >\r\n                √\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"7\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                7\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"8\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                8\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"9\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                9\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlMain\"\r\n                value=\"/\"\r\n                onClick={this.handleClickSign}\r\n              >\r\n                /\r\n              </button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <button onClick={this.handleBack}>←</button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"4\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                4\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"5\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                5\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"6\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                6\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlMain\"\r\n                value=\"x\"\r\n                onClick={this.handleClickSign}\r\n              >\r\n                x\r\n              </button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <button className=\"dangerBTN\" onClick={this.handleClearClick}>\r\n                AC\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"1\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                1\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"2\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                2\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"3\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                3\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlMain\"\r\n                value=\"-\"\r\n                onClick={this.handleClickSign}\r\n              >\r\n                -\r\n              </button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <button className=\"dangerBTN\" onClick={this.handleClearClick}>\r\n                C\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlNumber\"\r\n                value=\"0\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                0\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlMain\"\r\n                value=\"dot\"\r\n                onClick={this.handleDotClick}\r\n              >\r\n                .\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button\r\n                className=\"controlMain\"\r\n                value=\"+\"\r\n                onClick={this.handleClickSign}\r\n              >\r\n                +\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button className=\"resultBTN\" onClick={this.handleResultClick}>\r\n                =\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tr>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component } from \"react\";\nimport Control from \"./control/control\";\n\nclass App extends Component {\n  render() {\n    return <Control />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}